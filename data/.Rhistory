# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
runApp('~/R/Shiny/Chapter1.R')
runApp('~/R/Shiny/Chapter1.R')
View(movies)
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter2.R')
install.packages("DT")
runApp('~/R/Shiny/Chapter2.R')
runApp('~/R/Shiny/Chapter2.R')
?selectInput
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter1.R')
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter2.R')
runApp('~/R/Shiny/Chapter2_1.R')
?selectInput
runApp('~/R/Shiny/Chapter2_1.R')
?dateRangeInput
runApp('~/R/Shiny/Chapter2_RangeDate.R')
runApp('~/R/Shiny/Chapter2_Render.R')
runApp('~/R/Shiny/Chapter2_Render.R')
runApp('~/R/Shiny/Chapter2_RangeDate.R')
runApp('~/R/Shiny/Chapter2_BrushHover.R')
runApp('~/R/Shiny/Chapter2_DisplTextoutput.R')
runApp('~/R/Shiny/Chapter2_HTMLoutput.R')
runApp('~/R/Shiny/Chapter2_HTMLoutput.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
load("~/GitHub/AIPrediction/AI.RData")
View(AIproduction)
View(AIproduction)
load(url("http://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/AIproduction.RData"))
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/AIproduction.RData"))
source('~/GitHub/AIPrediction/AIPrediction1.R')
source('~/GitHub/AIPrediction/AIPrediction1.R')
source('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/App-1')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='aiprediction',
token='BE27430360B0A22BF39FDCBCEEA917D9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='aiprediction', token='BE27430360B0A22BF39FDCBCEEA917D9', secret='qt1csHryz13XQCcTvGTlIpHPrL/1Zn6VByZdAXAD')
runApp('~/GitHub/AIPrediction/App-1')
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
library(shiny); runApp('~/GitHub/AIPrediction/src/Dashboard.R')
?tabBox
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
?them()
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
install.packages("plotpy")
library(plotly)
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/Dashboard.RData"))
plotly(Dashboard,x=Date,y=CO2,type="bar",name="CO2") %>%
add_trace(x=Date,y=N2,modee="lines",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plotly(Dashboard,x=Date,y=CO2,type="bar",name="CO2")
plotly(data=Dashboard,x=Date,y=CO2,type="bar")
plot_ly(Dashboard,x=Date,y=CO2,type="bar",name="CO2") %>%
add_trace(x=Date,y=N2,modee="lines",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=CO2,type="bar",name="CO2") %>%
add_trace(x=Date,y=N2,modee="lines",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
p=plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="bar")
p
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="lines",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$N2,modee="lines",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="lines",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$N2,modee="lines",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="lines",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$N2,modee="scatter",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="area",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$N2,modee="scatter",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="lines",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$N2,modee="scatter",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="lines",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$BTU,modee="scatter",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
plot_ly(Dashboard,x=Dashboard$Date,y=Dashboard$CO2,type="scatter",name="CO2") %>%
add_trace(x=Dashboard$Date,y=Dashboard$BTU,modee="bar",yaxis="y2",name="N2") %>%
layout(yaxis2=list(overlaying="y",side="right"))
?plot_ly
plot_ly() %>%
add_lines(x=Dashboard$Date,y=Dashboard$N2,name="N2") %>%
add_lines(x=Dashboard$Date,y=Dashboard$BTU,name="BTU",yaxis="y2")
layout(yaxis2=list(overlaying="y",side="right"))
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
plot_ly() %>%
add_lines(x=Dashboard$Date,y=Dashboard$N2,name="N2") %>%
add_lines(x=Dashboard$Date,y=Dashboard$BTU,name="BTU",yaxis="y2")
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
plot_ly() %>%
add_lines(x=Dashboard$Date,y=Dashboard$N2,name="N2") %>%
add_lines(x=Dashboard$Date,y=Dashboard$BTU,name="BTU",yaxis="y2")
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
library(shiny); runApp('Dashboard.R')
drillingsch <- read.csv(GanttChart.csv)
drillingsch <- read.csv("GanttChart.csv")
setwd("~/GitHub/AIPrediction/data")
drillingsch <- read.csv("GanttChart.csv")
drlsch <- read.csv("GanttChart.csv")
drlsch$Start <- as.Date(drlsch$Start,format = "%m/%d/%Y")
rm("drillingsch")
cols <- RColorBrewer::brewer.pal(length(unique(df$Resource)), name = "Set3")
cols <- RColorBrewer::brewer.pal(length(unique(df$Rig)), name = "Set3")
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set3")
drlsch$color <- factor(drlsch$Rig, labels = cols)
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set2")
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set1")
drlsch$color <- factor(drlsch$Rig, labels = cols)
unique(drlsch$Rig)
length(unique(drlsch$Rig))
RColorBrewer::brewer.pal(2,name = "Set1")
drlsch <- read.csv("GanttChart.csv")
drlsch$Start <- as.Date(drlsch$Start,format = "%m/%d/%Y")
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set1")
drlsch$color <- factor(drlsch$Rig, labels = cols)
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(df$Start[i], df$Start[i] + df$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = df$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", df$Task[i], "
",
"Duration: ", df$Duration[i], "days
",
"Rig: ", df$Resource[i]),
evaluate = T  # needed to avoid lazy loading
)
}
p <- layout(p,
# Axis options:
# 1. Remove gridlines
# 2. Customize y-axis tick labels and show task names instead of numbers
xaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6")),
yaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6"),
tickmode = "array", tickvals = 1:nrow(drlsch), ticktext = unique(drlsch$Project),
domain = c(0, 0.9)),
# Annotations
annotations = list(
# Add total duration and total resources used
# x and y coordinates are based on a domain of [0,1] and not
# actual x-axis and y-axis values
list(xref = "paper", yref = "paper",
x = 0.80, y = 0.1,
text = paste0("Total Duration: ", sum(df$Duration), " days
",
"Total Resources: ", length(unique(df$Rig)), "
"),
font = list(color = "#ffff66", size = 12),
ax = 0, ay = 0,
align = "left"),
# Add client name and title on top
list(xref = "paper", yref = "paper",
x = 0.1, y = 1, xanchor = "left",
text = paste0("Gantt Chart: ", client),
font = list(color = "#f2f2f2", size = 20, family = "Times New Roman"),
ax = 0, ay = 0,
align = "left")
),
plot_bgcolor = "#333333",  # Chart area color
paper_bgcolor = "#333333")  # Axis area color
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(df$Start[i], df$Start[i] + df$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = df$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", df$Task[i], "
",
"Duration: ", df$Duration[i], "days
",
"Rig: ", df$Resource[i]),
evaluate = T  # needed to avoid lazy loading
)
}
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Task[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Resource[i]),
evaluate = T  # needed to avoid lazy loading
)
p <- layout(p,
# Axis options:
# 1. Remove gridlines
# 2. Customize y-axis tick labels and show task names instead of numbers
xaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6")),
yaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6"),
tickmode = "array", tickvals = 1:nrow(drlsch), ticktext = unique(drlsch$Project),
domain = c(0, 0.9)),
# Annotations
annotations = list(
# Add total duration and total resources used
# x and y coordinates are based on a domain of [0,1] and not
# actual x-axis and y-axis values
list(xref = "paper", yref = "paper",
x = 0.80, y = 0.1,
text = paste0("Total Duration: ", sum(drlsch$Duration), " days
",
"Total Resources: ", length(unique(drlsch$Rig)), "
"),
font = list(color = "#ffff66", size = 12),
ax = 0, ay = 0,
align = "left"),
# Add client name and title on top
list(xref = "paper", yref = "paper",
x = 0.1, y = 1, xanchor = "left",
text = paste0("Gantt Chart: ", client),
font = list(color = "#f2f2f2", size = 20, family = "Times New Roman"),
ax = 0, ay = 0,
align = "left")
),
plot_bgcolor = "#333333",  # Chart area color
paper_bgcolor = "#333333")  # Axis area color
client = "Sample Client"
p <- layout(p,
# Axis options:
# 1. Remove gridlines
# 2. Customize y-axis tick labels and show task names instead of numbers
xaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6")),
yaxis = list(showgrid = F, tickfont = list(color = "#e6e6e6"),
tickmode = "array", tickvals = 1:nrow(drlsch), ticktext = unique(drlsch$Project),
domain = c(0, 0.9)),
# Annotations
annotations = list(
# Add total duration and total resources used
# x and y coordinates are based on a domain of [0,1] and not
# actual x-axis and y-axis values
list(xref = "paper", yref = "paper",
x = 0.80, y = 0.1,
text = paste0("Total Duration: ", sum(drlsch$Duration), " days
",
"Total Resources: ", length(unique(drlsch$Rig)), "
"),
font = list(color = "#ffff66", size = 12),
ax = 0, ay = 0,
align = "left"),
# Add client name and title on top
list(xref = "paper", yref = "paper",
x = 0.1, y = 1, xanchor = "left",
text = paste0("Gantt Chart: ", client),
font = list(color = "#f2f2f2", size = 20, family = "Times New Roman"),
ax = 0, ay = 0,
align = "left")
),
plot_bgcolor = "#333333",  # Chart area color
paper_bgcolor = "#333333")  # Axis area color
p
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Task[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Resource[i]),
evaluate = T  # needed to avoid lazy loading
)
}
p
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Project[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Rig[i]),
evaluate = T  # needed to avoid lazy loading
)
}
p
client = "BaseCase Development"
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = '#264E86', size = 20, family = "Times New Roman"),
ax = 0,
ay = 0,
align = "left",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = '#264E86', size = 20, family = "Times New Roman"),
ax = 0,
ay = 0,
align = "center",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = 'chocolate', size = 20, family = "Helvetica"),
ax = 0,
ay = 0,
align = "center",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Project[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Rig[i]),
evaluate = T  # needed to avoid lazy loading
)
}
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = 'chocolate', size = 20, family = "Helvetica"),
ax = 0,
ay = 0,
align = "center",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
rm(list=ls())
drlsch <- read.csv("DrillingChart.csv")
drlsch <- read.csv("DrillingChart.csv")
save.image(file='DrillingSchedule.RData')
rm(list=ls())
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/DrillingSchedule.RData"))
rm(list=ls())
drlsch <- read.csv("DrillingSchedule.csv")
drlsch <- read.csv("DrillingChart.csv")
drlsch$Start <- as.Date(drlsch$Start,format = "%m/%d/%Y")
drlsch <- read.csv("DrillingChart.csv")
save.image(file='DrillingSchedule.RData')
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/DrillingSchedule.RData"))
drlsch$Start <- as.Date(drlsch$Start,format = "%m/%d/%Y")
client = "BaseCase Development"
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set1")
drlsch$color <- factor(drlsch$Rig, labels = cols)
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Project[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Rig[i]),
evaluate = T  # needed to avoid lazy loading
)
}
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = 'chocolate', size = 20, family = "Helvetica"),
ax = 0,
ay = 0,
align = "center",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
rm(list=ls())
drlsch <- read.csv("DrillingChart.csv")
save.image(file='DrillingSchedule.RData')
rm(list=ls())
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/DrillingSchedule.RData"))
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/DrillingSchedule.RData"))
source('~/GitHub/AIPrediction/data/DrillingSchedule.R')
drlsch$Start <- as.Date(drlsch$Start,format = "%m/%d/%Y")
client = "BaseCase Development"
cols <- RColorBrewer::brewer.pal(length(unique(drlsch$Rig)), name = "Set1")
drlsch$color <- factor(drlsch$Rig, labels = cols)
p <- plot_ly()
for(i in 1:(nrow(drlsch) - 1)){
p <- add_trace(p,
x = c(drlsch$Start[i], drlsch$Start[i] + drlsch$Duration[i]),  # x0, x1
y = c(i, i),  # y0, y1
mode = "lines",
line = list(color = drlsch$color[i], width = 20),
showlegend = F,
hoverinfo = "text",
# Create custom hover text
text = paste("Project: ", drlsch$Project[i], "
",
"Duration: ", drlsch$Duration[i], "days
",
"Rig: ", drlsch$Rig[i]),
evaluate = T  # needed to avoid lazy loading
)
}
a <- list(xref = "paper",
yref = "paper",
x = 0.1,
y = 1,
xanchor = "left",
text = paste0("Drilling Schedule: ", client),
font = list(color = 'chocolate', size = 20, family = "Helvetica"),
ax = 0,
ay = 0,
align = "center",
showarrow = FALSE)
p <- p %>% layout(annotations = a)
p
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
rm(list=ls())
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
runApp('~/GitHub/AIPrediction/src/Dashboard.R')
